---
format:
  revealjs:
    incremental: false
    css: styles.css
execute: 
  echo: true
---

# The Unix Shell

SWC @ University of Twente

2024-05-27

Joel H. Nitta

<https://joelnitta.github.io/2024-05-27-tudelft-online-bash>

# Introduction

## Prep

- Download [shell-lesson-data.zip](https://swcarpentry.github.io/shell-novice/data/shell-lesson-data.zip) and move the file to your Desktop.

- Unzip/extract the file. **You should end up with a new folder called shell-lesson-data on your Desktop.**

## Open a new shell

For instructions by operating system, see the [Shell Lesson](https://swcarpentry.github.io/shell-novice/#where-to-type-commands-how-to-open-a-new-shell)

## Human-computer interaction

- Humans interact with computers using **GUI** (graphical user interface) or **CLI** (command-line interface).

- **GUI**: Intuitive, menu-driven, but not efficient for repetitive tasks.

- **CLI** (Unix shell): Efficient for repetitive tasks, automates tasks quickly.

## Introduction to the Shell

- The shell **interprets** and **runs** the commands typed by the user.

- Popular Unix shell: **Bash** (**B**ourne **A**gain **SH**ell).

- Benefits of using the shell:
  - Automates repetitive tasks
  - Efficient data handling with powerful pipelines
  - Essential for remote machine interaction and high-performance computing

---

- Today we will learn how to interact with the shell via **commands**

## Shell interface

When you open the shell, you should see something like this:

```
$
```

## Shell interface

- The `$` is the **prompt**, where you type your commands

- Depending on your setup, it may look a little different, for example:

```
nelle@localhost $
```

## `ls`

The first command we will learn is `ls`, which **lists** the content of your current directory (we will come back to this later):

```
ls
```

```
Desktop     Downloads   Movies      Pictures
Documents   Library     Music       Public
```

## Nelle's Pipeline

- The example dataset is based on a story about "Nelle Nemo"

- Context: Nelle Nemo is a marine biologist who samples marine life.

- Nelle's Task: Process 1520 samples with `goostats.sh` to measure protein abundance.

- Challenge: Using a GUI, Nelle would need to manually run 1520 files, taking over 12 hours. **Can Nelle do this more efficiently with the shell?**

# Navigating files and folders

## Questions

- How can I move around on my computer?

- How can I see what files and directories I have?

- How can I specify the location of a file or directory on my computer?

## What is a File System?

- **File System**: Manages files and directories.
  - **Files**: Hold information (data).
  - **Directories** (= Folders): Hold files or other directories.

## Where are we?

Use `pwd` to show your current working directory (where you "are" in your computer)


---

![](https://swcarpentry.github.io/shell-novice/fig/filesystem.svg)

## Slashes

- There are two meanings for the `/` character.
  - When it appears at the front of a file or directory name, it refers to the **root directory**.
  - When it appears inside a path, it’s just a **separator**.

---

![](https://swcarpentry.github.io/shell-novice/fig/home-directories.svg)

For example, Nelle's files are stored in `/Users/nelle.`

## List files with `ls`

- Use the `-F` **option** to adjust the output:
  - a trailing `/` indicates that this is a directory
  - `@` indicates a link
  - `*` indicates an executable

```
ls -F
```

## Clear the terminal

You can clear a cluttered terminal with `clear`

## Help

Get a help menu by adding `--help`:

```
ls --help
```

## Help

Or, add `man` in front of the command:

```
man ls
```

## Challenge: `ls` {.smaller}

![](https://swcarpentry.github.io/shell-novice/fig/filesystem-challenge.svg){height=400px}

If `pwd` displays `/Users/backup`, and `-r` tells `ls` to display things in reverse order, **what command(s) will result in the following output:**

```
pnas_sub/ pnas_final/ original/
```

1. `ls pwd`
1. `ls -r -F`
1. `ls -r -F /Users/backup`

## Exploring other directories

```
ls -F Desktop
```

## Move into other directories with `cd`

```
cd Desktop
cd shell-lesson-data
cd exercise-data
```

## Shortcuts for moving: `..`

`..` takes you one directory higher

```
cd ..
```

## Shortcuts for moving: `..`

Note that if you use `ls -a` to show everything, you will see `..`

## Shortcuts for moving: `~`

You can use `~` to move to your **home directory**

## Shortcuts for moving: `-`

You can use `-` to move back to the directory you just came from

## Absolute vs. relative paths

If you type a path that does not start with `/`, it means you are talking about a folder or file **relative to your current location**

If you type a path that starts with `/`, it means you are talking about a path **from the root of the file system**

---

## Challenge: relative paths {.smaller}

![](https://swcarpentry.github.io/shell-novice/fig/filesystem-challenge.svg){height=400px}


If `pwd` displays `/Users/thing`, **what will `ls -F ../backup` display?**

1. `../backup: No such file or directory`
1. `2012-12-01 2013-01-08 2013-01-27`
1. `2012-12-01/ 2013-01-08/ 2013-01-27/`
1. `original/ pnas_final/ pnas_sub/`

## General Syntax of a Shell Command

![](https://swcarpentry.github.io/shell-novice/fig/shell_command_syntax.svg)

## General Syntax of a Shell Command

- Options can usually be written in two ways:
  - Long form `--` (`ls --all`)
  - Short form `-` (`ls -a`)
- Spaces matter (`ls-F` means the command "ls-F")
- Capitalization matters (`ls -s` vs `ls -S`)

## Tab completion

The shell will finish typing the names of files and folders for you when you press the tab key

Try it from `~/Desktop/shell-lesson-data/`

```
ls north-pacific-gyre/
```

```
ls north-pacific-gyre/goo
```

# Working With Files and Directories

## Questions

- How can I create, copy, and delete files and directories?

- How can I edit files?

## Make a new directory with `mkdir`

- Make sure we are in `shell-lesson-data`, then enter `exercise-data/writing`

- Have a look around, then create a new directory called `thesis`:

```
mkdir thesis
```

## Make a new directory with `mkdir`

You can create a nested directory using `-p`

```
mkdir -p ../project/data ../project/results
```

Check what you did (`-R` option to the ls command will list all nested subdirectories within a directory):

```
ls -FR ../project
```

## Best practices: names for files and directories

1. Don’t use spaces.
2. Don’t begin the name with `-` (dash).
3. Stick with letters, numbers, `.` (period or ‘full stop’), `-` (dash) and `_` (underscore).

## Create a text file

`nano` is a text editor program. It will create a file and open it for editing.

```
cd thesis
nano draft.txt
```

---

![](https://swcarpentry.github.io/shell-novice/fig/nano-screenshot.png)

Press `Ctrl+o` to save (as indicated by `^0`), then `Ctrl+x` to exit

## Create a text file with `touch`

```
touch my_file.txt
```

## Delete a file with `rm`

```
rm my_file.txt
```

- `rm` is forever! (no recycle bin). **Be very careful** when you use it.

## Move or rename files and folders with `mv`

Enter `shell-lesson-data/exercise-data/writing`:

```
cd ~/Desktop/shell-lesson-data/exercise-data/writing
```

Let's rename `draft.txt`:

```
mv thesis/draft.txt thesis/quotes.txt
```

(check the results with `ls`)

## Move or rename files and folders with `mv`

- Like `rm`, there is no "undo" button for `mv`: it will over-write any file with the same name, so **use carefully!**

Let's move `quotes.txt` into our current directory:

```
mv thesis/quotes.txt .
```

Check `ls thesis`

## Copy files and folders with `cp`

- `cp` is similar to `mv`, but copies instead of moves

```
cp quotes.txt thesis/quotations.txt
ls quotes.txt thesis/quotations.txt
```

## Copy files and folders with `cp`

- Note that you can't just `cp` a folder:

```
cp thesis thesis_backup
```

```
cp: thesis is a directory (not copied).
```

## Copy files and folders with `cp`

- To copy a folder and all its contents, use the `-r` (**r**ecursive) option

```
cp -r thesis thesis_backup
```

## Delete folders with `rm -r`

- Similar to using `-r` for `cp`, you need `-r` to delete a folder:

```
rm -r thesis
```

- Again, **be careful!!**

## Moving, copying, or removing multiple files

- You can move or copy multiple files to a folder by typing all the file names first, then the folder last.
  - Let's test this in `shell-lesson-data/exercise-data`:

```
mkdir backup
cp creatures/minotaur.dat creatures/unicorn.dat backup/
```

## Using wildcards for accessing multiple files at once

- Moving multiple files at once is handy, but that was a lot of typing

- We can use `*` and `?` to match multiple file names. These are called "wildcards"

## Using wildcards for accessing multiple files at once

- Consider the files in `shell-lesson-data/exercise-data/alkanes`:

- `*`: Represents zero or more characters.
  - Example: `*.pdb` matches `ethane.pdb`, `propane.pdb`, etc.
  - Example: `p*.pdb` matches `pentane.pdb`, `propane.pdb`.

## Using wildcards for accessing multiple files at once

- `?`: Represents exactly one character.
  - Example: `?ethane.pdb` matches `methane.pdb`.
  - Example: `*ethane.pdb` matches `ethane.pdb`, `methane.pdb`.
  - Example: `???ane.pdb` matches `cubane.pdb`, `ethane.pdb`, `octane.pdb`.

## Wildcard expansion

- Shell expands wildcards to list matching filenames **before running the command**.
- If no match, the wildcard expression is passed as is.
- Example: `ls *.pdf` in a directory with only `.pdb` files results in an error.

## Challenge: List filenames matching a pattern

When run in the `alkanes` directory, which `ls` command(s) will produce this output?

```
ethane.pdb methane.pdb
```

1. `ls *t*ane.pdb`
1. `ls *t?ne.*`
1. `ls *t??ne.pdb`
1. `ls ethane.*`

## Challenge: Organizing {.smaller}

Jamie is working on a project, and she sees that her files aren’t very well organized:

```
$ ls -F
analyzed/  fructose.dat    raw/   sucrose.dat
```

The `fructose.dat` and `sucrose.dat` files contain output from her data analysis. **What command(s) covered in this lesson does she need to run so that the commands below will produce the output shown?**

```
$ ls -F
analyzed/   raw/
```

```
$ ls analyzed
fructose.dat    sucrose.dat
```

## Challenge: Reproduce a file structure {.smaller}

You’re starting a new experiment and would like to duplicate the directory structure from your previous experiment so you can add new data.

Assume that the previous experiment is in a folder called `2016-05-18`, which contains a data folder that in turn contains folders named raw and processed that contain data files. The goal is to copy the folder structure of the `2016-05-18` folder into a folder called `2016-05-20` so that your final directory structure looks like this:

```
2016-05-20/
└── data
   ├── processed
   └── raw
```

**Which of the following set of commands would achieve this objective? What would the other commands do?**

[See answer options here](https://swcarpentry.github.io/shell-novice/03-create.html#reproduce-a-folder-structure)

# Pipes and Filters

## Questions

- How can I combine existing commands to produce a desired output?

- How can I show only part of the output?

## 

